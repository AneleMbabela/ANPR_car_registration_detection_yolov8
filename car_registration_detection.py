# -*- coding: utf-8 -*-
"""car_registration_detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NuqFLw0h557XSFwo5KGJ7Km-u2VSxXy4

Before running the script please make sure you select the run time as gpu

**Import Libraries**
"""

from IPython.display import Image

"""**Clone the Github Repo**"""

!git clone https://github.com/MuhammadMoinFaisal/Automatic_Number_Plate_Detection_Recognition_YOLOv8.git

!pwd

"""Setting the current directory"""

# Commented out IPython magic to ensure Python compatibility.
# %cd Automatic_Number_Plate_Detection_Recognition_YOLOv8

"""Install all the dependencies"""

!pip install -e '.[dev]'

"""Moving to the required directory"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/Automatic_Number_Plate_Detection_Recognition_YOLOv8/ultralytics/yolo/v8/detect

"""**Importing the dataset from the roboflow**"""

!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="DuGKaxiqmMm1b4D1bkUs")
project = rf.workspace("moin").project("car_license_plates")
dataset = project.version(1).download("yolov5")

"""**Training the custom model**"""

HOME = "/content/Automatic_Number_Plate_Detection_Recognition_YOLOv8/ultralytics/yolo/v8/detect"

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}

MAAK = "/content/Automatic_Number_Plate_Detection_Recognition_YOLOv8/ultralytics/yolo/v8/detect/Car_License_Plates-1"

# Commented out IPython magic to ensure Python compatibility.
# %cd {MAAK}

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}

!python train.py model=yolov8m.pt data={MAAK}/data.yaml epochs=120 imgsz=540

"""**Checking the files inside the train folder**"""

!ls /content/Automatic_Number_Plate_Detection_Recognition_YOLOv8/runs/detect/train

"""**Printing the confusion matrix**"""

Image(filename = r'/content/Automatic_Number_Plate_Detection_Recognition_YOLOv8/runs/detect/train/confusion_matrix.png')

"""**Printing the training and the validation loss**"""

Image(filename = r'/content/Automatic_Number_Plate_Detection_Recognition_YOLOv8/runs/detect/train/results.png', width = 600)

"""**Printing the model prediction on validation batch**"""

Image(filename = r'/content/Automatic_Number_Plate_Detection_Recognition_YOLOv8/runs/detect/train/val_batch1_pred.jpg', width = 600)

"""**Inference with custom model**

**Demo Video 1**
"""

!pip install easyocr

"""**Downloading the demo video from the google drive**"""

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}

"""**Validate custom model**"""

!pwd

!python val.py model='/content/Automatic_Number_Plate_Detection_Recognition_YOLOv8/ultralytics/yolo/v8/detect/best.pt' data={data}

!gdown "https://drive.google.com/uc?id=1P-oVR0J35Dw40lzw47sE19oADSW-tyb1&confirm=t"

!python predict.py model='best.pt' source='demo.mp4'

"""**Display the demo video**"""

from IPython.display import HTML
from base64 import b64encode
import os

# input video path
save_path = '/content/demo.mp4'

# Compressed video path
compressed_path = "/content/result_compressed.mp4"

os.system(f"ffmpeg -i {save_path} -vcodec libx264 {compressed_path}")

# Show video
mp4 = open(compressed_path,'rb').read()
data_url = "data:video/mp4;base64;" + b64encode(mp4).decode()
HTML("""
<video width=400 controls>
      <source src="%s" type="video/mp4">
</video>
""" % data_url)